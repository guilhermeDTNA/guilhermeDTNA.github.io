import Head from "next/head";
import { Box, Button, Container, Typography } from "@mui/material";
import NavbarDesktop from "@/components/NavbarDesktop";
import styles from './styles.module.scss';
import { useRef, useState } from "react";
import { socialItems } from "@/providers/ItemsList";

const Contato = () => {
    const maxCharacters = 500;
    const inputFile = useRef<HTMLInputElement>(null);
    const btnSubmit = useRef<HTMLButtonElement>(null);
    const charactersSpan = useRef<HTMLSpanElement>(null);
    const [charactersLeft, setCharactersLeft] = useState<number>(maxCharacters);
    const [file, setFile] = useState<File | null>(null);

    function handleChange(event: any){
        setFile(event?.target?.files[0]);        
        ValidaArquivo(event?.target?.files[0]);
    }

    function ValidaArquivo(file: File) {
        var tamanhoArquivo = file?.size / 1024 / 1024; // in MB
        var tiposArquivo = ['image/png', 'image/jpeg', 'image/jpg', 'application/pdf'];

        if(tamanhoArquivo == 0){
            //Provavelmente a pessoa não escolheu arquivo algum, então cancela
            setFile(null);
        }

        if (tamanhoArquivo > 4) {
            alert('O arquivo excede a 4 MB');
            
            //Desabilita botão de enviar
            btnSubmit.current?.setAttribute("disabled", "disabled");
            inputFile.current?.setAttribute("value", "");
            setFile(null);
        } else {
            for (let i = 0; i < tiposArquivo.length; i++) {
                if (file?.type === tiposArquivo[i]) {
                    i=tiposArquivo.length;
                    btnSubmit.current?.removeAttribute("disabled");
                }

                else if(i===tiposArquivo.length-1){
                    alert('Tipo de arquivo não permitido (JPG, PNG, JPEG ou PDF)');
                    btnSubmit.current?.setAttribute("disabled", "disabled");
                    inputFile.current?.setAttribute("value", "");
                    setFile(null);
                }
            }
            
        }
    }

    function limitTextarea(event: any) {
        if(charactersSpan.current){
            const valor = event.target.value;
            const total = valor.length;
            if(total <= maxCharacters) {
                let resto = maxCharacters - total;
                setCharactersLeft(resto);

                if(resto <= 15){
                    charactersSpan.current.classList.add(styles.limit);
                } else{
                    charactersSpan.current.classList.remove(styles.limit);
                }

            } else {
                setCharactersLeft(valor.substr(0, maxCharacters));
            }
        }
        
    }

    return(
        <>
            <Head>
                <title>Guilherme Rocha Leite - Portfólio</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className="page flex">
                <NavbarDesktop />
                <Container maxWidth="xl">
                    <h3 className={styles.contactTitle}>Envie uma mensagem</h3>

                    <section className={styles.sectionContact}>
                        <form className={styles.contactForm}>
                            <Box className={styles.contactFormBody}>
                                <Box className={`${styles.formLine}`}>
                                    <fieldset>
                                        <label htmlFor="nome_autor">Nome
                                            <span className="required">*</span>
                                        </label>
                                        <input type="text" placeholder="Nome" name="nome_autor" id="nome_autor" required />
                                    </fieldset>

                                    <fieldset>
                                        <label htmlFor="email_autor">E-mail
                                            <span className="required">*</span>
                                        </label>
                                        <input type="email" placeholder="E-mail" name="email_autor" id="email_autor" required />
                                    </fieldset>

                                    <fieldset>
                                        <label htmlFor="telefone_autor">Telefone</label>
                                        <input type="text" id="telefone_autor" placeholder="Telefone" name="telefone_autor" />
                                    </fieldset>
                                </Box>

                                <Box className={styles.formBlock}>
                                    <Box>
                                        <span ref={charactersSpan} className={styles.charactersLeft}>{charactersLeft}</span>
                                        <span>Restantes</span>  
                                        <span className="required">*</span>
                                    </Box>
                                    <fieldset>
                                        <textarea maxLength={maxCharacters} rows={3} cols={6} placeholder="Mensagem" name="conteudo" id="texto" required
                                            onKeyUp={limitTextarea}
                                        ></textarea>
                                        {!file?.name ? 
                                            <input value="" ref={inputFile} onChange={handleChange} name="arquivo" type="file" id="arquivo" />
                                        : 
                                            <input ref={inputFile} onChange={handleChange} name="arquivo" type="file" id="arquivo" />
                                        }
                                    </fieldset>
                                </Box>
                            </Box>

                            <Box className={styles.submitArea}>
                                <Button ref={btnSubmit} type="submit">
                                    Enviar Mensagem
                                </Button>
                            </Box>
                        </form>
                    </section>

                    <section className={styles.sectionContact}>
                        <Typography className={styles.visitarPerfis}>
                            Visite meu perfil nas redes sociais:
                        </Typography>

                        {socialItems.length && 
                            <ul className={styles.socialItems}>
                                {socialItems.map((item, key) => (
                                    <li key={key}>
                                        <a title={item.name} href={item.link} target="_blank">
                                            {item.icon}
                                        </a>
                                    </li>
                                ))}
                            </ul>
                        }
                        
                    </section>
                </Container>
            </main>
        </>
    )
}

export default Contato;